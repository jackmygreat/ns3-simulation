// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flows.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flows_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flows_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flows_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flows_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flows_2eproto;
namespace ns3_proto {
class Flow;
struct FlowDefaultTypeInternal;
extern FlowDefaultTypeInternal _Flow_default_instance_;
class Flows;
struct FlowsDefaultTypeInternal;
extern FlowsDefaultTypeInternal _Flows_default_instance_;
}  // namespace ns3_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::ns3_proto::Flow* Arena::CreateMaybeMessage<::ns3_proto::Flow>(Arena*);
template<> ::ns3_proto::Flows* Arena::CreateMaybeMessage<::ns3_proto::Flows>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ns3_proto {

// ===================================================================

class Flow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_proto.Flow) */ {
 public:
  inline Flow() : Flow(nullptr) {}
  ~Flow() override;
  explicit PROTOBUF_CONSTEXPR Flow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Flow(const Flow& from);
  Flow(Flow&& from) noexcept
    : Flow() {
    *this = ::std::move(from);
  }

  inline Flow& operator=(const Flow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flow& operator=(Flow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Flow& default_instance() {
    return *internal_default_instance();
  }
  static inline const Flow* internal_default_instance() {
    return reinterpret_cast<const Flow*>(
               &_Flow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Flow& a, Flow& b) {
    a.Swap(&b);
  }
  inline void Swap(Flow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Flow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Flow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Flow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Flow& from) {
    Flow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3_proto.Flow";
  }
  protected:
  explicit Flow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcNodeFieldNumber = 1,
    kSrcPortFieldNumber = 2,
    kDstNodeFieldNumber = 3,
    kDstPortFieldNumber = 4,
    kSizeFieldNumber = 5,
    kArriveTimeFieldNumber = 6,
    kPriorityFieldNumber = 7,
  };
  // uint32 srcNode = 1;
  void clear_srcnode();
  uint32_t srcnode() const;
  void set_srcnode(uint32_t value);
  private:
  uint32_t _internal_srcnode() const;
  void _internal_set_srcnode(uint32_t value);
  public:

  // uint32 srcPort = 2;
  void clear_srcport();
  uint32_t srcport() const;
  void set_srcport(uint32_t value);
  private:
  uint32_t _internal_srcport() const;
  void _internal_set_srcport(uint32_t value);
  public:

  // uint32 dstNode = 3;
  void clear_dstnode();
  uint32_t dstnode() const;
  void set_dstnode(uint32_t value);
  private:
  uint32_t _internal_dstnode() const;
  void _internal_set_dstnode(uint32_t value);
  public:

  // uint32 dstPort = 4;
  void clear_dstport();
  uint32_t dstport() const;
  void set_dstport(uint32_t value);
  private:
  uint32_t _internal_dstport() const;
  void _internal_set_dstport(uint32_t value);
  public:

  // uint32 size = 5;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // uint32 arriveTime = 6;
  void clear_arrivetime();
  uint32_t arrivetime() const;
  void set_arrivetime(uint32_t value);
  private:
  uint32_t _internal_arrivetime() const;
  void _internal_set_arrivetime(uint32_t value);
  public:

  // optional uint32 priority = 7;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ns3_proto.Flow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t srcnode_;
    uint32_t srcport_;
    uint32_t dstnode_;
    uint32_t dstport_;
    uint32_t size_;
    uint32_t arrivetime_;
    uint32_t priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_flows_2eproto;
};
// -------------------------------------------------------------------

class Flows final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3_proto.Flows) */ {
 public:
  inline Flows() : Flows(nullptr) {}
  ~Flows() override;
  explicit PROTOBUF_CONSTEXPR Flows(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Flows(const Flows& from);
  Flows(Flows&& from) noexcept
    : Flows() {
    *this = ::std::move(from);
  }

  inline Flows& operator=(const Flows& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flows& operator=(Flows&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Flows& default_instance() {
    return *internal_default_instance();
  }
  static inline const Flows* internal_default_instance() {
    return reinterpret_cast<const Flows*>(
               &_Flows_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Flows& a, Flows& b) {
    a.Swap(&b);
  }
  inline void Swap(Flows* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flows* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Flows* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Flows>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Flows& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Flows& from) {
    Flows::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flows* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3_proto.Flows";
  }
  protected:
  explicit Flows(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowsFieldNumber = 1,
  };
  // repeated .ns3_proto.Flow flows = 1;
  int flows_size() const;
  private:
  int _internal_flows_size() const;
  public:
  void clear_flows();
  ::ns3_proto::Flow* mutable_flows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_proto::Flow >*
      mutable_flows();
  private:
  const ::ns3_proto::Flow& _internal_flows(int index) const;
  ::ns3_proto::Flow* _internal_add_flows();
  public:
  const ::ns3_proto::Flow& flows(int index) const;
  ::ns3_proto::Flow* add_flows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_proto::Flow >&
      flows() const;

  // @@protoc_insertion_point(class_scope:ns3_proto.Flows)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_proto::Flow > flows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_flows_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Flow

// uint32 srcNode = 1;
inline void Flow::clear_srcnode() {
  _impl_.srcnode_ = 0u;
}
inline uint32_t Flow::_internal_srcnode() const {
  return _impl_.srcnode_;
}
inline uint32_t Flow::srcnode() const {
  // @@protoc_insertion_point(field_get:ns3_proto.Flow.srcNode)
  return _internal_srcnode();
}
inline void Flow::_internal_set_srcnode(uint32_t value) {
  
  _impl_.srcnode_ = value;
}
inline void Flow::set_srcnode(uint32_t value) {
  _internal_set_srcnode(value);
  // @@protoc_insertion_point(field_set:ns3_proto.Flow.srcNode)
}

// uint32 srcPort = 2;
inline void Flow::clear_srcport() {
  _impl_.srcport_ = 0u;
}
inline uint32_t Flow::_internal_srcport() const {
  return _impl_.srcport_;
}
inline uint32_t Flow::srcport() const {
  // @@protoc_insertion_point(field_get:ns3_proto.Flow.srcPort)
  return _internal_srcport();
}
inline void Flow::_internal_set_srcport(uint32_t value) {
  
  _impl_.srcport_ = value;
}
inline void Flow::set_srcport(uint32_t value) {
  _internal_set_srcport(value);
  // @@protoc_insertion_point(field_set:ns3_proto.Flow.srcPort)
}

// uint32 dstNode = 3;
inline void Flow::clear_dstnode() {
  _impl_.dstnode_ = 0u;
}
inline uint32_t Flow::_internal_dstnode() const {
  return _impl_.dstnode_;
}
inline uint32_t Flow::dstnode() const {
  // @@protoc_insertion_point(field_get:ns3_proto.Flow.dstNode)
  return _internal_dstnode();
}
inline void Flow::_internal_set_dstnode(uint32_t value) {
  
  _impl_.dstnode_ = value;
}
inline void Flow::set_dstnode(uint32_t value) {
  _internal_set_dstnode(value);
  // @@protoc_insertion_point(field_set:ns3_proto.Flow.dstNode)
}

// uint32 dstPort = 4;
inline void Flow::clear_dstport() {
  _impl_.dstport_ = 0u;
}
inline uint32_t Flow::_internal_dstport() const {
  return _impl_.dstport_;
}
inline uint32_t Flow::dstport() const {
  // @@protoc_insertion_point(field_get:ns3_proto.Flow.dstPort)
  return _internal_dstport();
}
inline void Flow::_internal_set_dstport(uint32_t value) {
  
  _impl_.dstport_ = value;
}
inline void Flow::set_dstport(uint32_t value) {
  _internal_set_dstport(value);
  // @@protoc_insertion_point(field_set:ns3_proto.Flow.dstPort)
}

// uint32 size = 5;
inline void Flow::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t Flow::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t Flow::size() const {
  // @@protoc_insertion_point(field_get:ns3_proto.Flow.size)
  return _internal_size();
}
inline void Flow::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void Flow::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ns3_proto.Flow.size)
}

// uint32 arriveTime = 6;
inline void Flow::clear_arrivetime() {
  _impl_.arrivetime_ = 0u;
}
inline uint32_t Flow::_internal_arrivetime() const {
  return _impl_.arrivetime_;
}
inline uint32_t Flow::arrivetime() const {
  // @@protoc_insertion_point(field_get:ns3_proto.Flow.arriveTime)
  return _internal_arrivetime();
}
inline void Flow::_internal_set_arrivetime(uint32_t value) {
  
  _impl_.arrivetime_ = value;
}
inline void Flow::set_arrivetime(uint32_t value) {
  _internal_set_arrivetime(value);
  // @@protoc_insertion_point(field_set:ns3_proto.Flow.arriveTime)
}

// optional uint32 priority = 7;
inline bool Flow::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Flow::has_priority() const {
  return _internal_has_priority();
}
inline void Flow::clear_priority() {
  _impl_.priority_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Flow::_internal_priority() const {
  return _impl_.priority_;
}
inline uint32_t Flow::priority() const {
  // @@protoc_insertion_point(field_get:ns3_proto.Flow.priority)
  return _internal_priority();
}
inline void Flow::_internal_set_priority(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.priority_ = value;
}
inline void Flow::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:ns3_proto.Flow.priority)
}

// -------------------------------------------------------------------

// Flows

// repeated .ns3_proto.Flow flows = 1;
inline int Flows::_internal_flows_size() const {
  return _impl_.flows_.size();
}
inline int Flows::flows_size() const {
  return _internal_flows_size();
}
inline void Flows::clear_flows() {
  _impl_.flows_.Clear();
}
inline ::ns3_proto::Flow* Flows::mutable_flows(int index) {
  // @@protoc_insertion_point(field_mutable:ns3_proto.Flows.flows)
  return _impl_.flows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_proto::Flow >*
Flows::mutable_flows() {
  // @@protoc_insertion_point(field_mutable_list:ns3_proto.Flows.flows)
  return &_impl_.flows_;
}
inline const ::ns3_proto::Flow& Flows::_internal_flows(int index) const {
  return _impl_.flows_.Get(index);
}
inline const ::ns3_proto::Flow& Flows::flows(int index) const {
  // @@protoc_insertion_point(field_get:ns3_proto.Flows.flows)
  return _internal_flows(index);
}
inline ::ns3_proto::Flow* Flows::_internal_add_flows() {
  return _impl_.flows_.Add();
}
inline ::ns3_proto::Flow* Flows::add_flows() {
  ::ns3_proto::Flow* _add = _internal_add_flows();
  // @@protoc_insertion_point(field_add:ns3_proto.Flows.flows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3_proto::Flow >&
Flows::flows() const {
  // @@protoc_insertion_point(field_list:ns3_proto.Flows.flows)
  return _impl_.flows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ns3_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flows_2eproto
