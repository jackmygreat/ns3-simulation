// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology.proto

#include "topology.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ns3_proto {
PROTOBUF_CONSTEXPR GlobalConfig::GlobalConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.randomseed_)*/0u} {}
struct GlobalConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalConfigDefaultTypeInternal() {}
  union {
    GlobalConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalConfigDefaultTypeInternal _GlobalConfig_default_instance_;
PROTOBUF_CONSTEXPR HostPortConfig::HostPortConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pfcenabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HostPortConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostPortConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostPortConfigDefaultTypeInternal() {}
  union {
    HostPortConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostPortConfigDefaultTypeInternal _HostPortConfig_default_instance_;
PROTOBUF_CONSTEXPR HostGroup::HostGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ports_)*/{}
  , /*decltype(_impl_.nodesnum_)*/0u
  , /*decltype(_impl_.baseindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HostGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostGroupDefaultTypeInternal() {}
  union {
    HostGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostGroupDefaultTypeInternal _HostGroup_default_instance_;
PROTOBUF_CONSTEXPR PortQueueConfig::PortQueueConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pfcreserved_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pfcheadroom_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ecnkmin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ecnkmax_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ecnpmax_)*/0} {}
struct PortQueueConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortQueueConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortQueueConfigDefaultTypeInternal() {}
  union {
    PortQueueConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortQueueConfigDefaultTypeInternal _PortQueueConfig_default_instance_;
PROTOBUF_CONSTEXPR SwitchPortConfig::SwitchPortConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.queues_)*/{}
  , /*decltype(_impl_.pfcenabled_)*/false
  , /*decltype(_impl_.pfcpassthrough_)*/false
  , /*decltype(_impl_.ecnenabled_)*/false} {}
struct SwitchPortConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchPortConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchPortConfigDefaultTypeInternal() {}
  union {
    SwitchPortConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchPortConfigDefaultTypeInternal _SwitchPortConfig_default_instance_;
PROTOBUF_CONSTEXPR SwitchMmuConfig::SwitchMmuConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buffersize_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pfcdynamicshift_)*/0u} {}
struct SwitchMmuConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchMmuConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchMmuConfigDefaultTypeInternal() {}
  union {
    SwitchMmuConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchMmuConfigDefaultTypeInternal _SwitchMmuConfig_default_instance_;
PROTOBUF_CONSTEXPR SwitchGroup::SwitchGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ports_)*/{}
  , /*decltype(_impl_.mmu_)*/nullptr
  , /*decltype(_impl_.nodesnum_)*/0u
  , /*decltype(_impl_.baseindex_)*/0u
  , /*decltype(_impl_.queuenum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchGroupDefaultTypeInternal() {}
  union {
    SwitchGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchGroupDefaultTypeInternal _SwitchGroup_default_instance_;
PROTOBUF_CONSTEXPR AllNodes::AllNodes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hostgroups_)*/{}
  , /*decltype(_impl_.switchgroups_)*/{}
  , /*decltype(_impl_.num_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllNodesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllNodesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllNodesDefaultTypeInternal() {}
  union {
    AllNodes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllNodesDefaultTypeInternal _AllNodes_default_instance_;
PROTOBUF_CONSTEXPR Link::Link(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.delay_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node1_)*/0u
  , /*decltype(_impl_.node2_)*/0u
  , /*decltype(_impl_.port1_)*/0u
  , /*decltype(_impl_.port2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkDefaultTypeInternal() {}
  union {
    Link _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkDefaultTypeInternal _Link_default_instance_;
PROTOBUF_CONSTEXPR Topology::Topology(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.links_)*/{}
  , /*decltype(_impl_.globalconfig_)*/nullptr
  , /*decltype(_impl_.nodes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TopologyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopologyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopologyDefaultTypeInternal() {}
  union {
    Topology _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopologyDefaultTypeInternal _Topology_default_instance_;
}  // namespace ns3_proto
static ::_pb::Metadata file_level_metadata_topology_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_topology_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_topology_2eproto = nullptr;

const uint32_t TableStruct_topology_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ns3_proto::GlobalConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::GlobalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::GlobalConfig, _impl_.randomseed_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::HostPortConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::HostPortConfig, _impl_.pfcenabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::HostGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::HostGroup, _impl_.nodesnum_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::HostGroup, _impl_.baseindex_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::HostGroup, _impl_.ports_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::PortQueueConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::PortQueueConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::PortQueueConfig, _impl_.pfcreserved_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::PortQueueConfig, _impl_.pfcheadroom_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::PortQueueConfig, _impl_.ecnkmin_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::PortQueueConfig, _impl_.ecnkmax_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::PortQueueConfig, _impl_.ecnpmax_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchPortConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchPortConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchPortConfig, _impl_.pfcenabled_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchPortConfig, _impl_.pfcpassthrough_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchPortConfig, _impl_.ecnenabled_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchPortConfig, _impl_.queues_),
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchMmuConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchMmuConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchMmuConfig, _impl_.buffersize_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchMmuConfig, _impl_.pfcdynamicshift_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchGroup, _impl_.nodesnum_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchGroup, _impl_.baseindex_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchGroup, _impl_.mmu_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchGroup, _impl_.queuenum_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::SwitchGroup, _impl_.ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::AllNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::AllNodes, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::AllNodes, _impl_.hostgroups_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::AllNodes, _impl_.switchgroups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Link, _impl_.node1_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Link, _impl_.node2_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Link, _impl_.port1_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Link, _impl_.port2_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Link, _impl_.rate_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Link, _impl_.delay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Topology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Topology, _impl_.globalconfig_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Topology, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::ns3_proto::Topology, _impl_.links_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::ns3_proto::GlobalConfig)},
  { 8, -1, -1, sizeof(::ns3_proto::HostPortConfig)},
  { 15, -1, -1, sizeof(::ns3_proto::HostGroup)},
  { 24, 35, -1, sizeof(::ns3_proto::PortQueueConfig)},
  { 40, 50, -1, sizeof(::ns3_proto::SwitchPortConfig)},
  { 54, 62, -1, sizeof(::ns3_proto::SwitchMmuConfig)},
  { 64, -1, -1, sizeof(::ns3_proto::SwitchGroup)},
  { 75, -1, -1, sizeof(::ns3_proto::AllNodes)},
  { 84, -1, -1, sizeof(::ns3_proto::Link)},
  { 96, -1, -1, sizeof(::ns3_proto::Topology)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ns3_proto::_GlobalConfig_default_instance_._instance,
  &::ns3_proto::_HostPortConfig_default_instance_._instance,
  &::ns3_proto::_HostGroup_default_instance_._instance,
  &::ns3_proto::_PortQueueConfig_default_instance_._instance,
  &::ns3_proto::_SwitchPortConfig_default_instance_._instance,
  &::ns3_proto::_SwitchMmuConfig_default_instance_._instance,
  &::ns3_proto::_SwitchGroup_default_instance_._instance,
  &::ns3_proto::_AllNodes_default_instance_._instance,
  &::ns3_proto::_Link_default_instance_._instance,
  &::ns3_proto::_Topology_default_instance_._instance,
};

const char descriptor_table_protodef_topology_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016topology.proto\022\tns3_proto\"6\n\014GlobalCon"
  "fig\022\027\n\nrandomSeed\030\001 \001(\rH\000\210\001\001B\r\n\013_randomS"
  "eed\"$\n\016HostPortConfig\022\022\n\npfcEnabled\030\001 \001("
  "\010\"Z\n\tHostGroup\022\020\n\010nodesNum\030\001 \001(\r\022\021\n\tbase"
  "Index\030\002 \001(\r\022(\n\005ports\030\003 \003(\0132\031.ns3_proto.H"
  "ostPortConfig\"\313\001\n\017PortQueueConfig\022\030\n\013pfc"
  "Reserved\030\001 \001(\tH\000\210\001\001\022\030\n\013pfcHeadroom\030\002 \001(\t"
  "H\001\210\001\001\022\024\n\007ecnKMin\030\004 \001(\tH\002\210\001\001\022\024\n\007ecnKMax\030\005"
  " \001(\tH\003\210\001\001\022\024\n\007ecnPMax\030\006 \001(\001H\004\210\001\001B\016\n\014_pfcR"
  "eservedB\016\n\014_pfcHeadroomB\n\n\010_ecnKMinB\n\n\010_"
  "ecnKMaxB\n\n\010_ecnPMax\"\226\001\n\020SwitchPortConfig"
  "\022\022\n\npfcEnabled\030\001 \001(\010\022\033\n\016pfcPassThrough\030\002"
  " \001(\010H\000\210\001\001\022\022\n\necnEnabled\030\003 \001(\010\022*\n\006queues\030"
  "\004 \003(\0132\032.ns3_proto.PortQueueConfigB\021\n\017_pf"
  "cPassThrough\"W\n\017SwitchMmuConfig\022\022\n\nbuffe"
  "rSize\030\001 \001(\t\022\034\n\017pfcDynamicShift\030\002 \001(\rH\000\210\001"
  "\001B\022\n\020_pfcDynamicShift\"\231\001\n\013SwitchGroup\022\020\n"
  "\010nodesNum\030\001 \001(\r\022\021\n\tbaseIndex\030\002 \001(\r\022\'\n\003mm"
  "u\030\003 \001(\0132\032.ns3_proto.SwitchMmuConfig\022\020\n\010q"
  "ueueNum\030\004 \001(\r\022*\n\005ports\030\005 \003(\0132\033.ns3_proto"
  ".SwitchPortConfig\"o\n\010AllNodes\022\013\n\003num\030\001 \001"
  "(\r\022(\n\nhostGroups\030\002 \003(\0132\024.ns3_proto.HostG"
  "roup\022,\n\014switchGroups\030\003 \003(\0132\026.ns3_proto.S"
  "witchGroup\"_\n\004Link\022\r\n\005node1\030\001 \001(\r\022\r\n\005nod"
  "e2\030\002 \001(\r\022\r\n\005port1\030\003 \001(\r\022\r\n\005port2\030\004 \001(\r\022\014"
  "\n\004rate\030\005 \001(\t\022\r\n\005delay\030\006 \001(\t\"}\n\010Topology\022"
  "-\n\014globalConfig\030\001 \001(\0132\027.ns3_proto.Global"
  "Config\022\"\n\005nodes\030\002 \001(\0132\023.ns3_proto.AllNod"
  "es\022\036\n\005links\030\003 \003(\0132\017.ns3_proto.Linkb\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_topology_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_topology_2eproto = {
    false, false, 1162, descriptor_table_protodef_topology_2eproto,
    "topology.proto",
    &descriptor_table_topology_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_topology_2eproto::offsets,
    file_level_metadata_topology_2eproto, file_level_enum_descriptors_topology_2eproto,
    file_level_service_descriptors_topology_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_topology_2eproto_getter() {
  return &descriptor_table_topology_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_topology_2eproto(&descriptor_table_topology_2eproto);
namespace ns3_proto {

// ===================================================================

class GlobalConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalConfig>()._impl_._has_bits_);
  static void set_has_randomseed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GlobalConfig::GlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.GlobalConfig)
}
GlobalConfig::GlobalConfig(const GlobalConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GlobalConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.randomseed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.randomseed_ = from._impl_.randomseed_;
  // @@protoc_insertion_point(copy_constructor:ns3_proto.GlobalConfig)
}

inline void GlobalConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.randomseed_){0u}
  };
}

GlobalConfig::~GlobalConfig() {
  // @@protoc_insertion_point(destructor:ns3_proto.GlobalConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GlobalConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.GlobalConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.randomseed_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 randomSeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_randomseed(&has_bits);
          _impl_.randomseed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.GlobalConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 randomSeed = 1;
  if (_internal_has_randomseed()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_randomseed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.GlobalConfig)
  return target;
}

size_t GlobalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.GlobalConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 randomSeed = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_randomseed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlobalConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalConfig::GetClassData() const { return &_class_data_; }


void GlobalConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlobalConfig*>(&to_msg);
  auto& from = static_cast<const GlobalConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.GlobalConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_randomseed()) {
    _this->_internal_set_randomseed(from._internal_randomseed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalConfig::CopyFrom(const GlobalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.GlobalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalConfig::IsInitialized() const {
  return true;
}

void GlobalConfig::InternalSwap(GlobalConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.randomseed_, other->_impl_.randomseed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[0]);
}

// ===================================================================

class HostPortConfig::_Internal {
 public:
};

HostPortConfig::HostPortConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.HostPortConfig)
}
HostPortConfig::HostPortConfig(const HostPortConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostPortConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pfcenabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pfcenabled_ = from._impl_.pfcenabled_;
  // @@protoc_insertion_point(copy_constructor:ns3_proto.HostPortConfig)
}

inline void HostPortConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pfcenabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HostPortConfig::~HostPortConfig() {
  // @@protoc_insertion_point(destructor:ns3_proto.HostPortConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostPortConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostPortConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostPortConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.HostPortConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pfcenabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostPortConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool pfcEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pfcenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostPortConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.HostPortConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool pfcEnabled = 1;
  if (this->_internal_pfcenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_pfcenabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.HostPortConfig)
  return target;
}

size_t HostPortConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.HostPortConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool pfcEnabled = 1;
  if (this->_internal_pfcenabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostPortConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostPortConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostPortConfig::GetClassData() const { return &_class_data_; }


void HostPortConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostPortConfig*>(&to_msg);
  auto& from = static_cast<const HostPortConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.HostPortConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pfcenabled() != 0) {
    _this->_internal_set_pfcenabled(from._internal_pfcenabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostPortConfig::CopyFrom(const HostPortConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.HostPortConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostPortConfig::IsInitialized() const {
  return true;
}

void HostPortConfig::InternalSwap(HostPortConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pfcenabled_, other->_impl_.pfcenabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostPortConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[1]);
}

// ===================================================================

class HostGroup::_Internal {
 public:
};

HostGroup::HostGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.HostGroup)
}
HostGroup::HostGroup(const HostGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){from._impl_.ports_}
    , decltype(_impl_.nodesnum_){}
    , decltype(_impl_.baseindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.nodesnum_, &from._impl_.nodesnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.baseindex_) -
    reinterpret_cast<char*>(&_impl_.nodesnum_)) + sizeof(_impl_.baseindex_));
  // @@protoc_insertion_point(copy_constructor:ns3_proto.HostGroup)
}

inline void HostGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){arena}
    , decltype(_impl_.nodesnum_){0u}
    , decltype(_impl_.baseindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HostGroup::~HostGroup() {
  // @@protoc_insertion_point(destructor:ns3_proto.HostGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ports_.~RepeatedPtrField();
}

void HostGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.HostGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ports_.Clear();
  ::memset(&_impl_.nodesnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.baseindex_) -
      reinterpret_cast<char*>(&_impl_.nodesnum_)) + sizeof(_impl_.baseindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 nodesNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nodesnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 baseIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.baseindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ns3_proto.HostPortConfig ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.HostGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nodesNum = 1;
  if (this->_internal_nodesnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nodesnum(), target);
  }

  // uint32 baseIndex = 2;
  if (this->_internal_baseindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baseindex(), target);
  }

  // repeated .ns3_proto.HostPortConfig ports = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ports_size()); i < n; i++) {
    const auto& repfield = this->_internal_ports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.HostGroup)
  return target;
}

size_t HostGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.HostGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3_proto.HostPortConfig ports = 3;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->_impl_.ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 nodesNum = 1;
  if (this->_internal_nodesnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodesnum());
  }

  // uint32 baseIndex = 2;
  if (this->_internal_baseindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_baseindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostGroup::GetClassData() const { return &_class_data_; }


void HostGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostGroup*>(&to_msg);
  auto& from = static_cast<const HostGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.HostGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ports_.MergeFrom(from._impl_.ports_);
  if (from._internal_nodesnum() != 0) {
    _this->_internal_set_nodesnum(from._internal_nodesnum());
  }
  if (from._internal_baseindex() != 0) {
    _this->_internal_set_baseindex(from._internal_baseindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostGroup::CopyFrom(const HostGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.HostGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostGroup::IsInitialized() const {
  return true;
}

void HostGroup::InternalSwap(HostGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ports_.InternalSwap(&other->_impl_.ports_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostGroup, _impl_.baseindex_)
      + sizeof(HostGroup::_impl_.baseindex_)
      - PROTOBUF_FIELD_OFFSET(HostGroup, _impl_.nodesnum_)>(
          reinterpret_cast<char*>(&_impl_.nodesnum_),
          reinterpret_cast<char*>(&other->_impl_.nodesnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[2]);
}

// ===================================================================

class PortQueueConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PortQueueConfig>()._impl_._has_bits_);
  static void set_has_pfcreserved(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pfcheadroom(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ecnkmin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ecnkmax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ecnpmax(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PortQueueConfig::PortQueueConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.PortQueueConfig)
}
PortQueueConfig::PortQueueConfig(const PortQueueConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PortQueueConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pfcreserved_){}
    , decltype(_impl_.pfcheadroom_){}
    , decltype(_impl_.ecnkmin_){}
    , decltype(_impl_.ecnkmax_){}
    , decltype(_impl_.ecnpmax_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pfcreserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pfcreserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pfcreserved()) {
    _this->_impl_.pfcreserved_.Set(from._internal_pfcreserved(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pfcheadroom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pfcheadroom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pfcheadroom()) {
    _this->_impl_.pfcheadroom_.Set(from._internal_pfcheadroom(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ecnkmin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ecnkmin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ecnkmin()) {
    _this->_impl_.ecnkmin_.Set(from._internal_ecnkmin(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ecnkmax_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ecnkmax_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ecnkmax()) {
    _this->_impl_.ecnkmax_.Set(from._internal_ecnkmax(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ecnpmax_ = from._impl_.ecnpmax_;
  // @@protoc_insertion_point(copy_constructor:ns3_proto.PortQueueConfig)
}

inline void PortQueueConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pfcreserved_){}
    , decltype(_impl_.pfcheadroom_){}
    , decltype(_impl_.ecnkmin_){}
    , decltype(_impl_.ecnkmax_){}
    , decltype(_impl_.ecnpmax_){0}
  };
  _impl_.pfcreserved_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pfcreserved_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pfcheadroom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pfcheadroom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ecnkmin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ecnkmin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ecnkmax_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ecnkmax_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PortQueueConfig::~PortQueueConfig() {
  // @@protoc_insertion_point(destructor:ns3_proto.PortQueueConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortQueueConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pfcreserved_.Destroy();
  _impl_.pfcheadroom_.Destroy();
  _impl_.ecnkmin_.Destroy();
  _impl_.ecnkmax_.Destroy();
}

void PortQueueConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PortQueueConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.PortQueueConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pfcreserved_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pfcheadroom_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ecnkmin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ecnkmax_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.ecnpmax_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortQueueConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string pfcReserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pfcreserved();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ns3_proto.PortQueueConfig.pfcReserved"));
        } else
          goto handle_unusual;
        continue;
      // optional string pfcHeadroom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pfcheadroom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ns3_proto.PortQueueConfig.pfcHeadroom"));
        } else
          goto handle_unusual;
        continue;
      // optional string ecnKMin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ecnkmin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ns3_proto.PortQueueConfig.ecnKMin"));
        } else
          goto handle_unusual;
        continue;
      // optional string ecnKMax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ecnkmax();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ns3_proto.PortQueueConfig.ecnKMax"));
        } else
          goto handle_unusual;
        continue;
      // optional double ecnPMax = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_ecnpmax(&has_bits);
          _impl_.ecnpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortQueueConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.PortQueueConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string pfcReserved = 1;
  if (_internal_has_pfcreserved()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pfcreserved().data(), static_cast<int>(this->_internal_pfcreserved().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_proto.PortQueueConfig.pfcReserved");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pfcreserved(), target);
  }

  // optional string pfcHeadroom = 2;
  if (_internal_has_pfcheadroom()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pfcheadroom().data(), static_cast<int>(this->_internal_pfcheadroom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_proto.PortQueueConfig.pfcHeadroom");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pfcheadroom(), target);
  }

  // optional string ecnKMin = 4;
  if (_internal_has_ecnkmin()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ecnkmin().data(), static_cast<int>(this->_internal_ecnkmin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_proto.PortQueueConfig.ecnKMin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ecnkmin(), target);
  }

  // optional string ecnKMax = 5;
  if (_internal_has_ecnkmax()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ecnkmax().data(), static_cast<int>(this->_internal_ecnkmax().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_proto.PortQueueConfig.ecnKMax");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ecnkmax(), target);
  }

  // optional double ecnPMax = 6;
  if (_internal_has_ecnpmax()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_ecnpmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.PortQueueConfig)
  return target;
}

size_t PortQueueConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.PortQueueConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string pfcReserved = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pfcreserved());
    }

    // optional string pfcHeadroom = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pfcheadroom());
    }

    // optional string ecnKMin = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ecnkmin());
    }

    // optional string ecnKMax = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ecnkmax());
    }

    // optional double ecnPMax = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortQueueConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PortQueueConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortQueueConfig::GetClassData() const { return &_class_data_; }


void PortQueueConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PortQueueConfig*>(&to_msg);
  auto& from = static_cast<const PortQueueConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.PortQueueConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pfcreserved(from._internal_pfcreserved());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pfcheadroom(from._internal_pfcheadroom());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ecnkmin(from._internal_ecnkmin());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ecnkmax(from._internal_ecnkmax());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ecnpmax_ = from._impl_.ecnpmax_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortQueueConfig::CopyFrom(const PortQueueConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.PortQueueConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortQueueConfig::IsInitialized() const {
  return true;
}

void PortQueueConfig::InternalSwap(PortQueueConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pfcreserved_, lhs_arena,
      &other->_impl_.pfcreserved_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pfcheadroom_, lhs_arena,
      &other->_impl_.pfcheadroom_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ecnkmin_, lhs_arena,
      &other->_impl_.ecnkmin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ecnkmax_, lhs_arena,
      &other->_impl_.ecnkmax_, rhs_arena
  );
  swap(_impl_.ecnpmax_, other->_impl_.ecnpmax_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortQueueConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[3]);
}

// ===================================================================

class SwitchPortConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SwitchPortConfig>()._impl_._has_bits_);
  static void set_has_pfcpassthrough(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SwitchPortConfig::SwitchPortConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.SwitchPortConfig)
}
SwitchPortConfig::SwitchPortConfig(const SwitchPortConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchPortConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.queues_){from._impl_.queues_}
    , decltype(_impl_.pfcenabled_){}
    , decltype(_impl_.pfcpassthrough_){}
    , decltype(_impl_.ecnenabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pfcenabled_, &from._impl_.pfcenabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ecnenabled_) -
    reinterpret_cast<char*>(&_impl_.pfcenabled_)) + sizeof(_impl_.ecnenabled_));
  // @@protoc_insertion_point(copy_constructor:ns3_proto.SwitchPortConfig)
}

inline void SwitchPortConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.queues_){arena}
    , decltype(_impl_.pfcenabled_){false}
    , decltype(_impl_.pfcpassthrough_){false}
    , decltype(_impl_.ecnenabled_){false}
  };
}

SwitchPortConfig::~SwitchPortConfig() {
  // @@protoc_insertion_point(destructor:ns3_proto.SwitchPortConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchPortConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queues_.~RepeatedPtrField();
}

void SwitchPortConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchPortConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.SwitchPortConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queues_.Clear();
  _impl_.pfcenabled_ = false;
  _impl_.pfcpassthrough_ = false;
  _impl_.ecnenabled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchPortConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool pfcEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pfcenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pfcPassThrough = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pfcpassthrough(&has_bits);
          _impl_.pfcpassthrough_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ecnEnabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ecnenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ns3_proto.PortQueueConfig queues = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwitchPortConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.SwitchPortConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool pfcEnabled = 1;
  if (this->_internal_pfcenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_pfcenabled(), target);
  }

  // optional bool pfcPassThrough = 2;
  if (_internal_has_pfcpassthrough()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pfcpassthrough(), target);
  }

  // bool ecnEnabled = 3;
  if (this->_internal_ecnenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ecnenabled(), target);
  }

  // repeated .ns3_proto.PortQueueConfig queues = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_queues_size()); i < n; i++) {
    const auto& repfield = this->_internal_queues(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.SwitchPortConfig)
  return target;
}

size_t SwitchPortConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.SwitchPortConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3_proto.PortQueueConfig queues = 4;
  total_size += 1UL * this->_internal_queues_size();
  for (const auto& msg : this->_impl_.queues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool pfcEnabled = 1;
  if (this->_internal_pfcenabled() != 0) {
    total_size += 1 + 1;
  }

  // optional bool pfcPassThrough = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  // bool ecnEnabled = 3;
  if (this->_internal_ecnenabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchPortConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchPortConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchPortConfig::GetClassData() const { return &_class_data_; }


void SwitchPortConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchPortConfig*>(&to_msg);
  auto& from = static_cast<const SwitchPortConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.SwitchPortConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.queues_.MergeFrom(from._impl_.queues_);
  if (from._internal_pfcenabled() != 0) {
    _this->_internal_set_pfcenabled(from._internal_pfcenabled());
  }
  if (from._internal_has_pfcpassthrough()) {
    _this->_internal_set_pfcpassthrough(from._internal_pfcpassthrough());
  }
  if (from._internal_ecnenabled() != 0) {
    _this->_internal_set_ecnenabled(from._internal_ecnenabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchPortConfig::CopyFrom(const SwitchPortConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.SwitchPortConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchPortConfig::IsInitialized() const {
  return true;
}

void SwitchPortConfig::InternalSwap(SwitchPortConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.queues_.InternalSwap(&other->_impl_.queues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchPortConfig, _impl_.ecnenabled_)
      + sizeof(SwitchPortConfig::_impl_.ecnenabled_)
      - PROTOBUF_FIELD_OFFSET(SwitchPortConfig, _impl_.pfcenabled_)>(
          reinterpret_cast<char*>(&_impl_.pfcenabled_),
          reinterpret_cast<char*>(&other->_impl_.pfcenabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchPortConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[4]);
}

// ===================================================================

class SwitchMmuConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SwitchMmuConfig>()._impl_._has_bits_);
  static void set_has_pfcdynamicshift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SwitchMmuConfig::SwitchMmuConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.SwitchMmuConfig)
}
SwitchMmuConfig::SwitchMmuConfig(const SwitchMmuConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchMmuConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffersize_){}
    , decltype(_impl_.pfcdynamicshift_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.buffersize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buffersize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buffersize().empty()) {
    _this->_impl_.buffersize_.Set(from._internal_buffersize(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pfcdynamicshift_ = from._impl_.pfcdynamicshift_;
  // @@protoc_insertion_point(copy_constructor:ns3_proto.SwitchMmuConfig)
}

inline void SwitchMmuConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buffersize_){}
    , decltype(_impl_.pfcdynamicshift_){0u}
  };
  _impl_.buffersize_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.buffersize_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SwitchMmuConfig::~SwitchMmuConfig() {
  // @@protoc_insertion_point(destructor:ns3_proto.SwitchMmuConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchMmuConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buffersize_.Destroy();
}

void SwitchMmuConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchMmuConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.SwitchMmuConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buffersize_.ClearToEmpty();
  _impl_.pfcdynamicshift_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchMmuConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bufferSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_buffersize();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ns3_proto.SwitchMmuConfig.bufferSize"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pfcDynamicShift = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pfcdynamicshift(&has_bits);
          _impl_.pfcdynamicshift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwitchMmuConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.SwitchMmuConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bufferSize = 1;
  if (!this->_internal_buffersize().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buffersize().data(), static_cast<int>(this->_internal_buffersize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_proto.SwitchMmuConfig.bufferSize");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_buffersize(), target);
  }

  // optional uint32 pfcDynamicShift = 2;
  if (_internal_has_pfcdynamicshift()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pfcdynamicshift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.SwitchMmuConfig)
  return target;
}

size_t SwitchMmuConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.SwitchMmuConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bufferSize = 1;
  if (!this->_internal_buffersize().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buffersize());
  }

  // optional uint32 pfcDynamicShift = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pfcdynamicshift());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchMmuConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchMmuConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchMmuConfig::GetClassData() const { return &_class_data_; }


void SwitchMmuConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchMmuConfig*>(&to_msg);
  auto& from = static_cast<const SwitchMmuConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.SwitchMmuConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffersize().empty()) {
    _this->_internal_set_buffersize(from._internal_buffersize());
  }
  if (from._internal_has_pfcdynamicshift()) {
    _this->_internal_set_pfcdynamicshift(from._internal_pfcdynamicshift());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchMmuConfig::CopyFrom(const SwitchMmuConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.SwitchMmuConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchMmuConfig::IsInitialized() const {
  return true;
}

void SwitchMmuConfig::InternalSwap(SwitchMmuConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.buffersize_, lhs_arena,
      &other->_impl_.buffersize_, rhs_arena
  );
  swap(_impl_.pfcdynamicshift_, other->_impl_.pfcdynamicshift_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchMmuConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[5]);
}

// ===================================================================

class SwitchGroup::_Internal {
 public:
  static const ::ns3_proto::SwitchMmuConfig& mmu(const SwitchGroup* msg);
};

const ::ns3_proto::SwitchMmuConfig&
SwitchGroup::_Internal::mmu(const SwitchGroup* msg) {
  return *msg->_impl_.mmu_;
}
SwitchGroup::SwitchGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.SwitchGroup)
}
SwitchGroup::SwitchGroup(const SwitchGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){from._impl_.ports_}
    , decltype(_impl_.mmu_){nullptr}
    , decltype(_impl_.nodesnum_){}
    , decltype(_impl_.baseindex_){}
    , decltype(_impl_.queuenum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mmu()) {
    _this->_impl_.mmu_ = new ::ns3_proto::SwitchMmuConfig(*from._impl_.mmu_);
  }
  ::memcpy(&_impl_.nodesnum_, &from._impl_.nodesnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.queuenum_) -
    reinterpret_cast<char*>(&_impl_.nodesnum_)) + sizeof(_impl_.queuenum_));
  // @@protoc_insertion_point(copy_constructor:ns3_proto.SwitchGroup)
}

inline void SwitchGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ports_){arena}
    , decltype(_impl_.mmu_){nullptr}
    , decltype(_impl_.nodesnum_){0u}
    , decltype(_impl_.baseindex_){0u}
    , decltype(_impl_.queuenum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchGroup::~SwitchGroup() {
  // @@protoc_insertion_point(destructor:ns3_proto.SwitchGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ports_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.mmu_;
}

void SwitchGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.SwitchGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ports_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.mmu_ != nullptr) {
    delete _impl_.mmu_;
  }
  _impl_.mmu_ = nullptr;
  ::memset(&_impl_.nodesnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.queuenum_) -
      reinterpret_cast<char*>(&_impl_.nodesnum_)) + sizeof(_impl_.queuenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 nodesNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nodesnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 baseIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.baseindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3_proto.SwitchMmuConfig mmu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mmu(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 queueNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.queuenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ns3_proto.SwitchPortConfig ports = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwitchGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.SwitchGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nodesNum = 1;
  if (this->_internal_nodesnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nodesnum(), target);
  }

  // uint32 baseIndex = 2;
  if (this->_internal_baseindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baseindex(), target);
  }

  // .ns3_proto.SwitchMmuConfig mmu = 3;
  if (this->_internal_has_mmu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mmu(this),
        _Internal::mmu(this).GetCachedSize(), target, stream);
  }

  // uint32 queueNum = 4;
  if (this->_internal_queuenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_queuenum(), target);
  }

  // repeated .ns3_proto.SwitchPortConfig ports = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ports_size()); i < n; i++) {
    const auto& repfield = this->_internal_ports(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.SwitchGroup)
  return target;
}

size_t SwitchGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.SwitchGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3_proto.SwitchPortConfig ports = 5;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->_impl_.ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ns3_proto.SwitchMmuConfig mmu = 3;
  if (this->_internal_has_mmu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mmu_);
  }

  // uint32 nodesNum = 1;
  if (this->_internal_nodesnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nodesnum());
  }

  // uint32 baseIndex = 2;
  if (this->_internal_baseindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_baseindex());
  }

  // uint32 queueNum = 4;
  if (this->_internal_queuenum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_queuenum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchGroup::GetClassData() const { return &_class_data_; }


void SwitchGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchGroup*>(&to_msg);
  auto& from = static_cast<const SwitchGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.SwitchGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ports_.MergeFrom(from._impl_.ports_);
  if (from._internal_has_mmu()) {
    _this->_internal_mutable_mmu()->::ns3_proto::SwitchMmuConfig::MergeFrom(
        from._internal_mmu());
  }
  if (from._internal_nodesnum() != 0) {
    _this->_internal_set_nodesnum(from._internal_nodesnum());
  }
  if (from._internal_baseindex() != 0) {
    _this->_internal_set_baseindex(from._internal_baseindex());
  }
  if (from._internal_queuenum() != 0) {
    _this->_internal_set_queuenum(from._internal_queuenum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchGroup::CopyFrom(const SwitchGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.SwitchGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchGroup::IsInitialized() const {
  return true;
}

void SwitchGroup::InternalSwap(SwitchGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ports_.InternalSwap(&other->_impl_.ports_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchGroup, _impl_.queuenum_)
      + sizeof(SwitchGroup::_impl_.queuenum_)
      - PROTOBUF_FIELD_OFFSET(SwitchGroup, _impl_.mmu_)>(
          reinterpret_cast<char*>(&_impl_.mmu_),
          reinterpret_cast<char*>(&other->_impl_.mmu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[6]);
}

// ===================================================================

class AllNodes::_Internal {
 public:
};

AllNodes::AllNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.AllNodes)
}
AllNodes::AllNodes(const AllNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllNodes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hostgroups_){from._impl_.hostgroups_}
    , decltype(_impl_.switchgroups_){from._impl_.switchgroups_}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_ = from._impl_.num_;
  // @@protoc_insertion_point(copy_constructor:ns3_proto.AllNodes)
}

inline void AllNodes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hostgroups_){arena}
    , decltype(_impl_.switchgroups_){arena}
    , decltype(_impl_.num_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllNodes::~AllNodes() {
  // @@protoc_insertion_point(destructor:ns3_proto.AllNodes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllNodes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hostgroups_.~RepeatedPtrField();
  _impl_.switchgroups_.~RepeatedPtrField();
}

void AllNodes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.AllNodes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hostgroups_.Clear();
  _impl_.switchgroups_.Clear();
  _impl_.num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllNodes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ns3_proto.HostGroup hostGroups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hostgroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ns3_proto.SwitchGroup switchGroups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_switchgroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllNodes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.AllNodes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num = 1;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num(), target);
  }

  // repeated .ns3_proto.HostGroup hostGroups = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hostgroups_size()); i < n; i++) {
    const auto& repfield = this->_internal_hostgroups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ns3_proto.SwitchGroup switchGroups = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_switchgroups_size()); i < n; i++) {
    const auto& repfield = this->_internal_switchgroups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.AllNodes)
  return target;
}

size_t AllNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.AllNodes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3_proto.HostGroup hostGroups = 2;
  total_size += 1UL * this->_internal_hostgroups_size();
  for (const auto& msg : this->_impl_.hostgroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ns3_proto.SwitchGroup switchGroups = 3;
  total_size += 1UL * this->_internal_switchgroups_size();
  for (const auto& msg : this->_impl_.switchgroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 num = 1;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllNodes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllNodes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllNodes::GetClassData() const { return &_class_data_; }


void AllNodes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllNodes*>(&to_msg);
  auto& from = static_cast<const AllNodes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.AllNodes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hostgroups_.MergeFrom(from._impl_.hostgroups_);
  _this->_impl_.switchgroups_.MergeFrom(from._impl_.switchgroups_);
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllNodes::CopyFrom(const AllNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.AllNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllNodes::IsInitialized() const {
  return true;
}

void AllNodes::InternalSwap(AllNodes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hostgroups_.InternalSwap(&other->_impl_.hostgroups_);
  _impl_.switchgroups_.InternalSwap(&other->_impl_.switchgroups_);
  swap(_impl_.num_, other->_impl_.num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllNodes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[7]);
}

// ===================================================================

class Link::_Internal {
 public:
};

Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Link* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rate_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.node1_){}
    , decltype(_impl_.node2_){}
    , decltype(_impl_.port1_){}
    , decltype(_impl_.port2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rate().empty()) {
    _this->_impl_.rate_.Set(from._internal_rate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.delay_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delay_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delay().empty()) {
    _this->_impl_.delay_.Set(from._internal_delay(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.node1_, &from._impl_.node1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port2_) -
    reinterpret_cast<char*>(&_impl_.node1_)) + sizeof(_impl_.port2_));
  // @@protoc_insertion_point(copy_constructor:ns3_proto.Link)
}

inline void Link::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rate_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.node1_){0u}
    , decltype(_impl_.node2_){0u}
    , decltype(_impl_.port1_){0u}
    , decltype(_impl_.port2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.delay_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delay_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:ns3_proto.Link)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rate_.Destroy();
  _impl_.delay_.Destroy();
}

void Link::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.Link)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_.ClearToEmpty();
  _impl_.delay_.ClearToEmpty();
  ::memset(&_impl_.node1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.port2_) -
      reinterpret_cast<char*>(&_impl_.node1_)) + sizeof(_impl_.port2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 node1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 node2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.node2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.port2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ns3_proto.Link.rate"));
        } else
          goto handle_unusual;
        continue;
      // string delay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_delay();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ns3_proto.Link.delay"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Link::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.Link)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node1 = 1;
  if (this->_internal_node1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node1(), target);
  }

  // uint32 node2 = 2;
  if (this->_internal_node2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_node2(), target);
  }

  // uint32 port1 = 3;
  if (this->_internal_port1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port1(), target);
  }

  // uint32 port2 = 4;
  if (this->_internal_port2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port2(), target);
  }

  // string rate = 5;
  if (!this->_internal_rate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rate().data(), static_cast<int>(this->_internal_rate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_proto.Link.rate");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rate(), target);
  }

  // string delay = 6;
  if (!this->_internal_delay().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delay().data(), static_cast<int>(this->_internal_delay().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ns3_proto.Link.delay");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.Link)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rate = 5;
  if (!this->_internal_rate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rate());
  }

  // string delay = 6;
  if (!this->_internal_delay().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delay());
  }

  // uint32 node1 = 1;
  if (this->_internal_node1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_node1());
  }

  // uint32 node2 = 2;
  if (this->_internal_node2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_node2());
  }

  // uint32 port1 = 3;
  if (this->_internal_port1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port1());
  }

  // uint32 port2 = 4;
  if (this->_internal_port2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Link::GetClassData() const { return &_class_data_; }


void Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Link*>(&to_msg);
  auto& from = static_cast<const Link&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.Link)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rate().empty()) {
    _this->_internal_set_rate(from._internal_rate());
  }
  if (!from._internal_delay().empty()) {
    _this->_internal_set_delay(from._internal_delay());
  }
  if (from._internal_node1() != 0) {
    _this->_internal_set_node1(from._internal_node1());
  }
  if (from._internal_node2() != 0) {
    _this->_internal_set_node2(from._internal_node2());
  }
  if (from._internal_port1() != 0) {
    _this->_internal_set_port1(from._internal_port1());
  }
  if (from._internal_port2() != 0) {
    _this->_internal_set_port2(from._internal_port2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rate_, lhs_arena,
      &other->_impl_.rate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delay_, lhs_arena,
      &other->_impl_.delay_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Link, _impl_.port2_)
      + sizeof(Link::_impl_.port2_)
      - PROTOBUF_FIELD_OFFSET(Link, _impl_.node1_)>(
          reinterpret_cast<char*>(&_impl_.node1_),
          reinterpret_cast<char*>(&other->_impl_.node1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[8]);
}

// ===================================================================

class Topology::_Internal {
 public:
  static const ::ns3_proto::GlobalConfig& globalconfig(const Topology* msg);
  static const ::ns3_proto::AllNodes& nodes(const Topology* msg);
};

const ::ns3_proto::GlobalConfig&
Topology::_Internal::globalconfig(const Topology* msg) {
  return *msg->_impl_.globalconfig_;
}
const ::ns3_proto::AllNodes&
Topology::_Internal::nodes(const Topology* msg) {
  return *msg->_impl_.nodes_;
}
Topology::Topology(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ns3_proto.Topology)
}
Topology::Topology(const Topology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Topology* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){from._impl_.links_}
    , decltype(_impl_.globalconfig_){nullptr}
    , decltype(_impl_.nodes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_globalconfig()) {
    _this->_impl_.globalconfig_ = new ::ns3_proto::GlobalConfig(*from._impl_.globalconfig_);
  }
  if (from._internal_has_nodes()) {
    _this->_impl_.nodes_ = new ::ns3_proto::AllNodes(*from._impl_.nodes_);
  }
  // @@protoc_insertion_point(copy_constructor:ns3_proto.Topology)
}

inline void Topology::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){arena}
    , decltype(_impl_.globalconfig_){nullptr}
    , decltype(_impl_.nodes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Topology::~Topology() {
  // @@protoc_insertion_point(destructor:ns3_proto.Topology)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Topology::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.links_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.globalconfig_;
  if (this != internal_default_instance()) delete _impl_.nodes_;
}

void Topology::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Topology::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3_proto.Topology)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.links_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.globalconfig_ != nullptr) {
    delete _impl_.globalconfig_;
  }
  _impl_.globalconfig_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nodes_ != nullptr) {
    delete _impl_.nodes_;
  }
  _impl_.nodes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Topology::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ns3_proto.GlobalConfig globalConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_globalconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3_proto.AllNodes nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ns3_proto.Link links = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Topology::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3_proto.Topology)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3_proto.GlobalConfig globalConfig = 1;
  if (this->_internal_has_globalconfig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::globalconfig(this),
        _Internal::globalconfig(this).GetCachedSize(), target, stream);
  }

  // .ns3_proto.AllNodes nodes = 2;
  if (this->_internal_has_nodes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nodes(this),
        _Internal::nodes(this).GetCachedSize(), target, stream);
  }

  // repeated .ns3_proto.Link links = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3_proto.Topology)
  return target;
}

size_t Topology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3_proto.Topology)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3_proto.Link links = 3;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->_impl_.links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ns3_proto.GlobalConfig globalConfig = 1;
  if (this->_internal_has_globalconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.globalconfig_);
  }

  // .ns3_proto.AllNodes nodes = 2;
  if (this->_internal_has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nodes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Topology::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Topology::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Topology::GetClassData() const { return &_class_data_; }


void Topology::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Topology*>(&to_msg);
  auto& from = static_cast<const Topology&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ns3_proto.Topology)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.links_.MergeFrom(from._impl_.links_);
  if (from._internal_has_globalconfig()) {
    _this->_internal_mutable_globalconfig()->::ns3_proto::GlobalConfig::MergeFrom(
        from._internal_globalconfig());
  }
  if (from._internal_has_nodes()) {
    _this->_internal_mutable_nodes()->::ns3_proto::AllNodes::MergeFrom(
        from._internal_nodes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Topology::CopyFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3_proto.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {
  return true;
}

void Topology::InternalSwap(Topology* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.links_.InternalSwap(&other->_impl_.links_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Topology, _impl_.nodes_)
      + sizeof(Topology::_impl_.nodes_)
      - PROTOBUF_FIELD_OFFSET(Topology, _impl_.globalconfig_)>(
          reinterpret_cast<char*>(&_impl_.globalconfig_),
          reinterpret_cast<char*>(&other->_impl_.globalconfig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Topology::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_topology_2eproto_getter, &descriptor_table_topology_2eproto_once,
      file_level_metadata_topology_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ns3_proto::GlobalConfig*
Arena::CreateMaybeMessage< ::ns3_proto::GlobalConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::GlobalConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_proto::HostPortConfig*
Arena::CreateMaybeMessage< ::ns3_proto::HostPortConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::HostPortConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_proto::HostGroup*
Arena::CreateMaybeMessage< ::ns3_proto::HostGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::HostGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_proto::PortQueueConfig*
Arena::CreateMaybeMessage< ::ns3_proto::PortQueueConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::PortQueueConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_proto::SwitchPortConfig*
Arena::CreateMaybeMessage< ::ns3_proto::SwitchPortConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::SwitchPortConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_proto::SwitchMmuConfig*
Arena::CreateMaybeMessage< ::ns3_proto::SwitchMmuConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::SwitchMmuConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_proto::SwitchGroup*
Arena::CreateMaybeMessage< ::ns3_proto::SwitchGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::SwitchGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_proto::AllNodes*
Arena::CreateMaybeMessage< ::ns3_proto::AllNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::AllNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_proto::Link*
Arena::CreateMaybeMessage< ::ns3_proto::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3_proto::Topology*
Arena::CreateMaybeMessage< ::ns3_proto::Topology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3_proto::Topology >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
